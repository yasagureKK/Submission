//=============================================================================
// チュートリアルでのポーズ処理 [tutorial_pause.cpp]
// Author : 草刈 翔
//=============================================================================
//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "tutorial_pause.h"
#include "manager.h"
#include "sound.h"

//*****************************************************************************
// 静的メンバ変数宣言
//*****************************************************************************
bool CTutorialPause::m_bPause = false;

//=============================================================================
// コンストラクタ
//=============================================================================
CTutorialPause::CTutorialPause(int nPriority) :CScene(nPriority)
{
	// 変数のクリア
	m_nTimer = 0;
}

//=============================================================================
// デストラクタ
//=============================================================================
CTutorialPause::~CTutorialPause()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CTutorialPause::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	// 変数の初期化
	m_bPause = true;

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CTutorialPause::Uninit(void)
{
	// 破棄する前にポーズ状態を解除
	m_bPause = false;

	// オブジェクトの破棄
	Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CTutorialPause::Update(void)
{
	//サウンド取得処理
	CSound *pSound;
	pSound = CManager::GetSound();

	if (m_bPause == true)
	{
		// タイマーを減らす
		m_nTimer--;

		// タイマーが0になったら終了
		if (m_nTimer <= 0)
		{
			Uninit();
		}
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void CTutorialPause::Draw(void)
{

}

//=============================================================================
// 生成処理
//=============================================================================
CTutorialPause *CTutorialPause::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size, int nTimer)
{
	// インスタンスの生成
	CTutorialPause *pTutorialPause = NULL;

	// ヌルチェック
	if (pTutorialPause == NULL)
	{
		// クラスの生成
		pTutorialPause = new CTutorialPause;
		if (pTutorialPause != NULL)
		{
			// 変数の設定
			pTutorialPause->m_nTimer = nTimer;

			// 初期化処理
			pTutorialPause->Init(pos, size);
		}
	}

	return pTutorialPause;
}

//=============================================================================
// ポーズ設定処理
//=============================================================================
void CTutorialPause::SetPause(bool bPause)
{
	m_bPause = bPause;
}

//=============================================================================
// ポーズ取得処理
//=============================================================================
bool CTutorialPause::GetPause(void)
{
	return m_bPause;
}